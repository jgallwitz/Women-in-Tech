# -*- coding: utf-8 -*-
"""WIT_SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aPAlXXqoTNYyTiHrY-Ntuoo1xW_BwCbD
"""

# import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# read in CSV file and view dataset
jobs_survey = pd.read_csv('/content/job_survey.csv')
#jobs_survey.head()

# dropping all rows that are outside of the US
jobs_survey = jobs_survey.drop(jobs_survey[jobs_survey['Country'] != 'United States of America'].index)

# dropping all NonDev employees
jobs_survey = jobs_survey.drop(jobs_survey[jobs_survey['MainBranch'] != 'Dev'].index)

# drop all nonbinary respondents since I want to compare men and women
jobs_survey = jobs_survey.drop(jobs_survey[jobs_survey['Gender'] == 'NonBinary'].index)

# reindexing
jobs_survey = jobs_survey.reset_index(drop=True)

# drop specified columns
jobs_survey = jobs_survey.drop(columns = ['Unnamed: 0'])

# drop qualitative columns as they are not conducive to performing SVM
jobs_survey_SVM = jobs_survey.drop(columns = ['Age', 'EdLevel','Employment','Employed','MentalHealth','MainBranch','Country', 'Accessibility', 'HaveWorkedWith'])
jobs_survey_SVM.head()

# import libraries for SVM
from sklearn.svm import LinearSVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.preprocessing import OrdinalEncoder

# SVM
# split data up into train and test sets
SVM_train, SVM_test = train_test_split(jobs_survey_SVM, test_size = .3, random_state = 1996)

# set label for train and test sets
SVM_train_label = SVM_train["Gender"]
SVM_test_label = SVM_test["Gender"]

# drop label
SVM_train = SVM_train.drop(["Gender"], axis = 1)
SVM_test = SVM_test.drop(["Gender"], axis = 1)

# execute oversample because women are underrepresented in dataset

# import library to upsample
from sklearn.utils import resample

# define majority and minority classes
majority_class = SVM_train[SVM_train_label == 'Man']
minority_class = SVM_train[SVM_train_label == 'Woman']

# upsample with replacement
# balance classes
minority_upsampled = resample(minority_class, replace = True, n_samples = len(majority_class), random_state = 1989)

# combine back to single train set
SVM_train = pd.concat([majority_class, minority_upsampled])
SVM_train_label = pd.concat([SVM_train_label[SVM_train_label == 'Man'], SVM_train_label[SVM_train_label == 'Woman']]).reindex(SVM_train.index)

SVM_train.head()

# fit linear SVM

SVM_Model1=LinearSVC(C=50)
SVM_Model1.fit(SVM_train, SVM_train_label)

SVM_predict = SVM_Model1.predict(SVM_test)

# create confusion matrix for linear SVM

# construct confusion matrix
conf_matrix = confusion_matrix(SVM_test_label, SVM_predict)

# display confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix = conf_matrix, display_labels = SVM_Model1.classes_)
disp.plot(cmap = 'Blues')

# accuracy for SVM 1
print("Accuracy:", SVM_Model1.score(SVM_test, SVM_test_label))

from sklearn.svm import SVC

# fit RBF SVM

SVM_Model2=SVC(C=10, kernel='rbf',
               verbose=True, gamma="auto")
SVM_Model2.fit(SVM_train, SVM_train_label)

SVM2_predict = SVM_Model2.predict(SVM_test)

# create confusion matrix for linear SVM

# construct confusion matrix
conf_matrix = confusion_matrix(SVM_test_label, SVM2_predict)

# display confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix = conf_matrix, display_labels = SVM_Model2.classes_)
disp.plot(cmap = 'Blues')

# accuracy for SVM 2
print("Accuracy:", SVM_Model2.score(SVM_test, SVM_test_label))

# fit third order polynomial SVM

SVM_Model3=SVC(C=100, kernel='sigmoid',
               gamma="auto", verbose=True)
SVM_Model3.fit(SVM_train, SVM_train_label)

SVM3_predict = SVM_Model3.predict(SVM_test)

# create confusion matrix for linear SVM

# construct confusion matrix
conf_matrix = confusion_matrix(SVM_test_label, SVM3_predict)

# display confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix = conf_matrix, display_labels = SVM_Model3.classes_)
disp.plot(cmap = 'Blues')

# accuracy for SVM 3
print("Accuracy:", SVM_Model3.score(SVM_test, SVM_test_label))